name: 🏗️ Medium - Create & Deploy Repository

# NOTE: This workflow uses GitHub App authentication for repository creation
# Requires ORG_APP_ID and ORG_PRIVATE_KEY secrets to be configured
permissions:
  contents: read
  actions: read

on:
  workflow_dispatch:
    inputs:
      template:
        description: 'Project Template'
        required: true
        default: 'aws-cdk-python'
        type: choice
        options:
          - aws-cdk-python
          - aws-cdk-typescript
          - terraform-aws
          - terraform-azure
          - python-fastapi
          - next-js
      project_name:
        description: 'Project Name (will be the repository name)'
        required: true
        type: string
      project_description:
        description: 'Project Description'
        required: false
        default: 'Generated using CloudyCS Repository Manager'
        type: string
      repository_visibility:
        description: 'Repository Visibility'
        required: false
        default: 'private'
        type: choice
        options:
          - private
          - public
      author_name:
        description: 'Author Name'
        required: false
        default: 'Your Name'
        type: string
      push_to_new_repo:
        description: 'Create and push to new repository?'
        required: true
        default: false
        type: boolean

jobs:
  create-repository:
    runs-on: ubuntu-latest
    outputs:
      repo_url: ${{ steps.create_repo.outputs.repo_url }}
      
    steps:
    - name: 📥 Checkout Repository Manager
      uses: actions/checkout@v4
      
    - name: � Get GitHub App Token
      uses: actions/create-github-app-token@v1
      id: app-token
      with:
        app-id: ${{ secrets.ORG_APP_ID }}
        private-key: ${{ secrets.ORG_PRIVATE_KEY }}
        owner: ${{ github.repository_owner }}
      
    - name: �🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🎯 Validate Template
      run: |
        echo "🔍 Validating template: ${{ github.event.inputs.template }}"
        node bin/repo-manager.js validate templates/${{ github.event.inputs.template }}
        echo "✅ Template validation passed"
        
    - name: 🏗️ Generate Project
      run: |
        echo "🚧 Generating project: ${{ github.event.inputs.project_name }}"
        mkdir -p generated
        
        # Set environment variables for template processing
        export projectName="${{ github.event.inputs.project_name }}"
        export description="${{ github.event.inputs.project_description }}"
        export authorName="${{ github.event.inputs.author_name }}"
        
        node bin/repo-manager.js create \
          --template ${{ github.event.inputs.template }} \
          --name ${{ github.event.inputs.project_name }} \
          --directory ./generated \
          --no-git \
          --no-install
          
        echo "✅ Project generated successfully"
        
    - name: 📋 Add Generation Metadata
      run: |
        cd generated/${{ github.event.inputs.project_name }}
        
        # Create workflow badge and info
        cat > .github-generation.md << 'EOF'
        <!-- Generated by CloudyCS Repository Manager -->
        # 🚀 ${{ github.event.inputs.project_name }}
        
        [![Generated by](https://img.shields.io/badge/Generated%20by-CloudyCS%20Repository%20Manager-blue)](https://github.com/${{ github.repository }})
        [![Template](https://img.shields.io/badge/Template-${{ github.event.inputs.template }}-green)](https://github.com/${{ github.repository }})
        
        **Generated:** $(date)
        **Template:** ${{ github.event.inputs.template }}
        **Author:** ${{ github.event.inputs.author_name }}
        
        ## About This Repository
        
        This repository was automatically generated using the CloudyCS Repository Manager.
        
        EOF
        
        # Prepend to existing README if it exists
        if [ -f README.md ]; then
          cat .github-generation.md README.md > temp-readme.md
          mv temp-readme.md README.md
        else
          mv .github-generation.md README.md
        fi
        
    - name: 🆕 Create New Repository
      if: ${{ github.event.inputs.push_to_new_repo == 'true' }}
      id: create_repo
      uses: actions/github-script@v7
      with:
        # Use GitHub App token for repository creation
        github-token: ${{ steps.app-token.outputs.token }}
        script: |
          try {
            console.log('🔄 Attempting to create repository with GitHub App...');
            const { data: repo } = await github.rest.repos.createForAuthenticatedUser({
              name: '${{ github.event.inputs.project_name }}',
              description: '${{ github.event.inputs.project_description }}',
              private: ${{ github.event.inputs.repository_visibility == 'private' }},
              auto_init: false,
              has_issues: true,
              has_projects: false,
              has_wiki: false
            });
            
            console.log(`✅ Created repository: ${repo.html_url}`);
            core.setOutput('repo_url', repo.html_url);
            core.setOutput('clone_url', repo.clone_url);
            return repo;
          } catch (error) {
            if (error.status === 403) {
              console.log('❌ Permission Error: GitHub App lacks repository creation permissions.');
              console.log('📋 To fix this, ensure your GitHub App has:');
              console.log('   1. "Contents" permission: Write');
              console.log('   2. "Administration" permission: Write');
              console.log('   3. "Metadata" permission: Read');
              console.log('   4. App must be installed on the target organization/user');
              console.log('');
              console.log('📖 Guide: https://docs.github.com/en/apps/creating-github-apps/registering-a-github-app/registering-a-github-app');
              console.log('');
              console.log('🔧 Current App Permissions Detected:');
              console.log('   - If you see this error, the app may be missing Administration: Write permission');
              console.log('   - Go to your GitHub App settings and verify permissions');
              console.log('   - After updating permissions, reinstall the app on the organization');
              
              core.setFailed('❌ WORKFLOW FAILED: GitHub App lacks repository creation permissions. Check app permissions and reinstall.');
              throw new Error('GitHub App permission denied - missing Administration: Write permission');
            } else if (error.status === 422) {
              console.log(`ℹ️ Repository '${{ github.event.inputs.project_name }}' already exists`);
              const { data: existingRepo } = await github.rest.repos.get({
                owner: context.payload.repository.owner.login,
                repo: '${{ github.event.inputs.project_name }}'
              });
              core.setOutput('repo_url', existingRepo.html_url);
              core.setOutput('clone_url', existingRepo.clone_url);
              return existingRepo;
            }
            console.log('❌ Unexpected error:', error.message);
            throw error;
          }
          
    - name: 🔄 Push to New Repository
      if: ${{ github.event.inputs.push_to_new_repo == 'true' && steps.create_repo.outputs.repo_url != 'Permission denied - Check GitHub App permissions' }}
      run: |
        cd generated/${{ github.event.inputs.project_name }}
        
        # Configure git
        git config --global user.name "CloudyCS Repository Manager"
        git config --global user.email "noreply@github.com"
        
        # Initialize and commit
        git init
        git add .
        git commit -m "🎉 Initial commit - Generated from ${{ github.event.inputs.template }} template

        Generated by: ${{ github.actor }}
        Template: ${{ github.event.inputs.template }}
        Repository Manager: ${{ github.repository }}
        "
        
        # Set up remote and push using GitHub App token
        git branch -M main
        git remote add origin https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/${{ github.repository_owner }}/${{ github.event.inputs.project_name }}.git
        git push -u origin main
        
        echo "✅ Pushed to new repository"
        
    - name: 📤 Upload as Artifact (Backup)
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.event.inputs.project_name }}-${{ github.event.inputs.template }}
        path: generated/${{ github.event.inputs.project_name }}
        retention-days: 7
        
    - name: 🎉 Workflow Complete
      run: |
        echo "## 🎉 Project Creation Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Project:** ${{ github.event.inputs.project_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Template:** ${{ github.event.inputs.template }}" >> $GITHUB_STEP_SUMMARY
        echo "**Author:** ${{ github.event.inputs.author_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event.inputs.push_to_new_repo }}" == "true" ]; then
          echo "### 🏠 New Repository Created" >> $GITHUB_STEP_SUMMARY
          echo "Your project has been pushed to: **[${{ github.event.inputs.project_name }}](${{ steps.create_repo.outputs.repo_url }})**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Quick Start" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "git clone ${{ steps.create_repo.outputs.clone_url }}" >> $GITHUB_STEP_SUMMARY
          echo "cd ${{ github.event.inputs.project_name }}" >> $GITHUB_STEP_SUMMARY
          echo "# Follow README.md instructions" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "### 📥 Download Generated Project" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to **Actions** → This workflow run" >> $GITHUB_STEP_SUMMARY
          echo "2. Download artifact: \`${{ github.event.inputs.project_name }}-${{ github.event.inputs.template }}\`" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Generated by [CloudyCS Repository Manager](${{ github.server_url }}/${{ github.repository }})*" >> $GITHUB_STEP_SUMMARY
